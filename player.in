#!/bin/sh
#
# $Log: player.in,v $
# Revision 1.15  2020-08-10 20:35:40+05:30  Cprogrammer
# fixed debug message call
#
# Revision 1.14  2020-08-10 17:25:14+05:30  Cprogrammer
# replaced /tmp/mpdev with MPDEV_TMPDIR
# exit now-playing when in pause or stop state
#
# Revision 1.13  2020-08-10 11:54:38+05:30  Cprogrammer
# skip http urls
#
# Revision 1.12  2020-08-09 20:50:50+05:30  Cprogrammer
# use unix domain socket if MYSQL_SOCKET env variable is defined
#
# Revision 1.11  2020-07-28 12:47:21+05:30  Cprogrammer
# added zztimestamp filed to Ratingtable
# fixed typo UNIX_TIMESTAMP
#
# Revision 1.10  2020-07-24 21:48:34+05:30  Cprogrammer
# for song-end exit if END_TIME is not set
#
# Revision 1.9  2020-07-22 15:51:33+05:30  Cprogrammer
# use AUTO_RATING env variable
#
# Revision 1.8  2020-07-21 22:28:19+05:30  Cprogrammer
# display rating for RompR in logs in RompR scale
#
# Revision 1.7  2020-07-21 19:20:29+05:30  Cprogrammer
# BUG. fixed rating tmp filename
#
# Revision 1.6  2020-07-21 18:31:38+05:30  Cprogrammer
# added error condition for getting rating from Ratingtable.
#
# Revision 1.5  2020-07-21 18:02:29+05:30  Cprogrammer
# create temp file for recording original start time
#
# Revision 1.4  2020-07-21 17:04:02+05:30  Cprogrammer
# option to run without sticker or stats db enabled
#
# Revision 1.3  2020-07-21 12:25:20+05:30  Cprogrammer
# added get_rompr_playcount_ts() function to get playcount and timestamp from Playcounttable
#
# Revision 1.2  2020-07-20 15:58:32+05:30  Cprogrammer
# multiple fixes to work properly with rompr
#
# Revision 1.1  2020-07-19 18:14:10+05:30  Cprogrammer
# Initial revision
#
#
# $Id: player.in,v 1.15 2020-08-10 20:35:40+05:30 Cprogrammer Exp mbhangui $
#
get_mpd_conf_value()
{
    grep "^$1" /etc/mpd.conf|awk '{print $2}' | \
    sed -e 's{"{{g'
}

get_TTindex()
{
	uri="$1"
	if [ -n "$MYSQL_SOCKET" ] ; then
		echo "SELECT TTindex FROM Tracktable WHERE Uri='$uri';" \
			| mysql -s -u "$MYSQL_USER" -p"$MYSQL_PASS" "$MYSQL_DATABASE" 2>/dev/null
	else
		echo "SELECT TTindex FROM Tracktable WHERE Uri='$uri';" \
			| mysql -s -u "$MYSQL_USER" -p"$MYSQL_PASS" -h $MYSQL_HOST "$MYSQL_DATABASE" 2>/dev/null
	fi
	if [ $? -ne 0 ] ; then
		echo "error: SELECT TTindex FROM Tracktable WHERE Uri='$uri';" 1>&2
		return 1
	fi
	return 0
}

get_rompr_rating()
{
	if [ -n "$MYSQL_SOCKET" ] ; then
		echo "SELECT Rating, UNIX_TIMESTAMP(zztimestamp) from Ratingtable where TTindex=$1;" \
			| mysql -s -u "$MYSQL_USER" -p"$MYSQL_PASS" "$MYSQL_DATABASE" 2>/dev/null
	else
		echo "SELECT Rating, UNIX_TIMESTAMP(zztimestamp) from Ratingtable where TTindex=$1;" \
			| mysql -s -u "$MYSQL_USER" -p"$MYSQL_PASS" -h $MYSQL_HOST "$MYSQL_DATABASE" 2>/dev/null
	fi
	if [ $? -ne 0 ] ; then
		if [ -n "$MYSQL_SOCKET" ] ; then
			(
			echo -n "ALTER TABLE Ratingtable ADD COLUMN zztimestamp TIMESTAMP DEFAULT "
			echo -n "CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP not null;"
			echo
			) | mysql -s -u "$MYSQL_USER" -p"$MYSQL_PASS" "$MYSQL_DATABASE" 2>/dev/null
			echo "SELECT Rating, UNIX_TIMESTAMP(zztimestamp) from Ratingtable where TTindex=$1;" \
				| mysql -s -u "$MYSQL_USER" -p"$MYSQL_PASS" "$MYSQL_DATABASE" 2>/dev/null
		else
			(
			echo -n "ALTER TABLE Ratingtable ADD COLUMN zztimestamp TIMESTAMP DEFAULT "
			echo -n "CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP not null;"
			echo
			) | mysql -s -u "$MYSQL_USER" -p"$MYSQL_PASS" -h $MYSQL_HOST "$MYSQL_DATABASE" 2>/dev/null
			echo "SELECT Rating, UNIX_TIMESTAMP(zztimestamp) from Ratingtable where TTindex=$1;" \
				| mysql -s -u "$MYSQL_USER" -p"$MYSQL_PASS" -h $MYSQL_HOST "$MYSQL_DATABASE" 2>/dev/null
		fi
		if [ $? -ne 0 ] ; then
			echo "error: SELECT Rating, UNIX_TIMESTAMP(zztimestamp) from Ratingtable where TTindex=$1;" 1>&2
			return 1
		fi
	fi
	return 0
}

get_mpd_rating()
{
	turi=`echo $1|sed -e "s{'{''{g"`
	sqlite3 -batch $sticker_file "SELECT value from sticker where type='song' and uri='$turi';"
	if [ $? -ne 0 ] ; then
		echo "error: SELECT value from sticker where type='song' and uri=\"$turi\";" 1>&2
		return 1
	fi
	return 0
}

get_stat_rating()
{
	turi=`echo $1|sed -e "s{'{''{g"`
	sqlite3 -batch $stats_file "SELECT rating from song where uri='$turi';"
	if [ $? -ne 0 ] ; then
		echo "error: SELECT rating from song where uri='$turi';" 1>&2
		return 1
	fi
	return 0
}

sticker_db_insert()
{
	turi=`echo $1|sed -e "s{'{''{g"`
	tmprate=$2
	sqlite3 -batch $sticker_file "INSERT or IGNORE into sticker values('song', '$turi', 'rating', $tmprate);"
	if [ $? -ne 0 ] ; then
		echo "error: INSERT into sticker values('song', '$turi', 'rating',$tmprate);" 1>&2
		return 1
	fi
	return 0
}

sticker_db_update()
{
	turi=`echo $1|sed -e "s{'{''{g"`
	tmprate=$2
	sqlite3 -batch $sticker_file "UPDATE sticker set value=$tmprate where type='song' and uri='$turi';"
	if [ $? -ne 0 ] ; then
		echo "error: UPDATE sticker set value=$tmprate where type='song' and uri='$turi';" 1>&2
		return 1
	fi
}

stats_db_insert()
{
	# SONG_LAST_MODIFIED: last_modified
	# SONG_ALBUM: album
	# SONG_ARTIST: artist
	# SONG_DATE: date
	# SONG_GENRE: genre
	# SONG_TITLE: title
	# SONG_TRACK: track
	# SONG_DURATION: duration

	turi=`echo "$1" | sed -e "s{'{''{g"`
	ARTIST=`echo "$SONG_ARTIST" | sed -e "s{'{''{g"`
	ALBUM=`echo "$SONG_ALBUM" | sed -e "s{'{''{g"`
	TITLE=`echo "$SONG_TITLE" | sed -e "s{'{''{g"`
	tmprate=$2
	sqlite3 -batch $stats_file "INSERT or IGNORE into \
		song (uri, play_count, last_played, rating, duration,last_modified,artist,album,title,track,genre,date) \
		values ('$turi',0,0,$tmprate,$SONG_DURATION,$SONG_LAST_MODIFIED,'$ARTIST','$ALBUM','$TITLE','$SONG_TRACK','$SONG_GENRE','$SONG_DATE');"
	if [ $? -ne 0 ] ; then
		(
		echo -n "INSERT or IGNORE into song "
		echo -n "(uri, play_count, last_played, rating, duration,"
		echo -n "last_modified,artist,album,title,track,genre,date)"
		echo -n "values ('$turi',0,0,$tmprate,$SONG_DURATION,"
		echo -n "$SONG_LAST_MODIFIED,'$ARTIST','$ALBUM','$TITLE',"
		echo -n "'$SONG_TRACK','$SONG_GENRE','$SONG_DATE');"
		echo
		) 1>&2
		return 1
	fi
	return 0
}

stats_db_update()
{
	turi=`echo "$1" | sed -e "s{'{''{g"`
	tmprate=$2
	last_played=$3
	if [ -n "$last_played" ] ; then
		sqlite3 -batch $stats_file \
			"UPDATE song set last_played=$last_played, play_count=play_count+1, rating=$tmprate where uri='$turi';"
	else
		sqlite3 -batch $stats_file \
			"UPDATE song set rating=$tmprate where uri='$turi';"
	fi
	if [ $? -ne 0 ] ; then
		if [ -n "$last_played" ] ; then
			echo  "ERROR: UPDATE song set last_played=$last_played, play_count=play_count+1, rating=$tmprate where uri='$turi';" 1>&2
		else
			echo  "ERROR: UPDATE song set rating=$tmprate where uri='$turi';" 1>&2
		fi
		return 1
	fi
	return 0
}

rompr_update_playcount()
{
	turi="$1"
	tm="$2"
	if [ $# -eq 3 ] ; then
		TTidx=$3
	else
		TTidx=`get_TTindex "$turi"`
	fi
	if [ -n "$TTidx" ] ; then
		if [ -n "$MYSQL_SOCKET" ] ; then
			(
			# update Playcount only when it is not being updated by RompR
			echo -n "UPDATE Playcounttable set Playcount=Playcount+1, LastPlayed=NOW() "
			echo -n "WHERE TTindex=$TTidx and UNIX_TIMESTAMP(LastPlayed) < $tm;"
			echo 
			# insert when the above update returns 0 rows
			echo -n "INSERT IGNORE into Playcounttable (TTindex,Playcount,Lastplayed) "
			echo -n "VALUES ($TTidx, 1, NOW());"
			echo
			) | mysql -s -u "$MYSQL_USER" -p"$MYSQL_PASS" "$MYSQL_DATABASE" 2>/dev/null
		else
			(
			# update Playcount only when it is not being updated by RompR
			echo -n "UPDATE Playcounttable set Playcount=Playcount+1, LastPlayed=NOW() "
			echo -n "WHERE TTindex=$TTidx and UNIX_TIMESTAMP(LastPlayed) < $tm;"
			echo 
			# insert when the above update returns 0 rows
			echo -n "INSERT IGNORE into Playcounttable (TTindex,Playcount,Lastplayed) "
			echo -n "VALUES ($TTidx, 1, NOW());"
			echo
			) | mysql -s -u "$MYSQL_USER" -p"$MYSQL_PASS" -h $MYSQL_HOST "$MYSQL_DATABASE" 2>/dev/null
		fi
		if [ $? -ne 0 ] ; then
			(
			echo "ERROR: "
			echo -n "UPDATE Playcounttable set Playcount=Playcount+1, LastPlayed=NOW() "
			echo -n "WHERE TTindex=$TTidx and UNIX_TIMESTAMP(LastPlayed) < $tm;"
			echo 
			echo -n "INSERT IGNORE into Playcounttable (TTindex,Playcount,Lastplayed) "
			echo -n "VALUES ($TTidx, 1, NOW());"
			echo
			) 1>&2
			return 1
		fi
	fi
	return 0
}

rompr_rating_update()
{
	turi=$(echo "$1" | sed s/"'"/"\\\'"/g)
	tstamp="$2"
	rompr_rating=`expr "$3" / 2`
	if [ $# -eq 4 ] ; then
		TTidx=$4
	else
		TTidx=`get_TTindex "$turi"`
	fi
	if [ -n "$TTidx" ] ; then
		if [ -n "$MYSQL_SOCKET" ] ; then
			(
			echo -n "INSERT INTO Ratingtable (TTindex, Rating, zztimestamp) "
			echo -n "VALUES ($TTidx, $rompr_rating, FROM_UNIXTIME($tstamp)) "
			echo -n "ON DUPLICATE KEY UPDATE Rating = $rompr_rating, "
			echo -n "zztimestamp=FROM_UNIXTIME($tstamp);"
			echo
			) | mysql -s -u "$MYSQL_USER" -p"$MYSQL_PASS" "$MYSQL_DATABASE" 2>/dev/null
		else
			(
			echo -n "INSERT INTO Ratingtable (TTindex, Rating, zztimestamp) "
			echo -n "VALUES ($TTidx, $rompr_rating, FROM_UNIXTIME($tstamp)) "
			echo -n "ON DUPLICATE KEY UPDATE Rating = $rompr_rating, "
			echo -n "zztimestamp=FROM_UNIXTIME($tstamp);"
			echo
			) | mysql -s -u "$MYSQL_USER" -p"$MYSQL_PASS" -h $MYSQL_HOST "$MYSQL_DATABASE" 2>/dev/null
		fi
		if [ $? -ne 0 ] ; then
			if [ -n "$MYSQL_SOCKET" ] ; then
				(
				echo -n "ALTER TABLE Ratingtable ADD COLUMN zztimestamp TIMESTAMP DEFAULT "
				echo -n "CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP not null;"
				echo
				) | mysql -s -u "$MYSQL_USER" -p"$MYSQL_PASS" "$MYSQL_DATABASE" 2>/dev/null
			else
				(
				echo -n "ALTER TABLE Ratingtable ADD COLUMN zztimestamp TIMESTAMP DEFAULT "
				echo -n "CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP not null;"
				echo
				) | mysql -s -u "$MYSQL_USER" -p"$MYSQL_PASS" -h $MYSQL_HOST "$MYSQL_DATABASE" 2>/dev/null
			fi
			if [ $? -ne 0 ] ; then
				(
				echo "ERROR: "
				echo -n "INSERT INTO Ratingtable (TTindex, Rating, zztimestamp) "
				echo -n "VALUES ($TTidx, $rompr_rating, FROM_UNIXTIME($tstamp)) "
				echo -n "ON DUPLICATE KEY UPDATE Rating = $rompr_rating, "
				echo -n "zztimestamp=FROM_UNIXTIME($tstamp);"
				echo
				) 1>&2
			fi
			if [ -n "$MYSQL_SOCKET" ] ; then
				(
				echo -n "INSERT INTO Ratingtable (TTindex, Rating, zztimestamp) "
				echo -n "VALUES ($TTidx, $rompr_rating, FROM_UNIXTIME($tstamp)) "
				echo -n "ON DUPLICATE KEY UPDATE Rating = $rompr_rating, "
				echo -n "zztimestamp=FROM_UNIXTIME($tstamp);"
				echo
				) | mysql -s -u "$MYSQL_USER" -p"$MYSQL_PASS" "$MYSQL_DATABASE" 2>/dev/null
			else
				(
				echo -n "INSERT INTO Ratingtable (TTindex, Rating, zztimestamp) "
				echo -n "VALUES ($TTidx, $rompr_rating, FROM_UNIXTIME($tstamp)) "
				echo -n "ON DUPLICATE KEY UPDATE Rating = $rompr_rating, "
				echo -n "zztimestamp=FROM_UNIXTIME($tstamp);"
				echo
				) | mysql -s -u "$MYSQL_USER" -p"$MYSQL_PASS" -h $MYSQL_HOST "$MYSQL_DATABASE" 2>/dev/null
			fi
			if [ $? -ne 0 ] ; then
				(
				echo "ERROR: "
				echo -n "INSERT INTO Ratingtable (TTindex, Rating, zztimestamp) "
				echo -n "VALUES ($TTidx, $rompr_rating, FROM_UNIXTIME($tstamp)) "
				echo -n "ON DUPLICATE KEY UPDATE Rating = $rompr_rating, "
				echo -n "zztimestamp=FROM_UNIXTIME($tstamp);"
				echo
				) 1>&2
				return 1
			fi
		fi
	fi
	return 0
}

get_rompr_playcount_ts()
{
	ts=$1
	if [ -n "$MYSQL_SOCKET" ] ; then
		echo "select Playcount,UNIX_TIMESTAMP(LastPlayed) from Playcounttable where TTindex=$ts;" \
			| mysql -s -u "$MYSQL_USER" -p"$MYSQL_PASS" "$MYSQL_DATABASE" 2>/dev/null
	else
		echo "select Playcount,UNIX_TIMESTAMP(LastPlayed) from Playcounttable where TTindex=$ts;" \
			| mysql -s -u "$MYSQL_USER" -p"$MYSQL_PASS" -h $MYSQL_HOST "$MYSQL_DATABASE" 2>/dev/null
	fi
	if [ $? -ne 0 ] ; then
		echo "ERROR: select Playcount,UNIX_TIMESTAMP(LastPlayed) from Playcounttable where TTindex=$ts;" 1>&2
		return 1
	fi
	return 0
}

scrobble()
{
	if [ -n "$SCROBBLE_LASTFM" ] ; then
		if [ $VERBOSE -eq 2 ] ; then
			echo lastfm-scrobbler --update --artist="$SONG_ARTIST" --album="$SONG_ALBUM" --track="$SONG_TITLE"  --duration="$SONG_DURATION"
		fi
		if [ $VERBOSE -eq 0 -o $VERBOSE -eq 1 ] ; then
			lastfm-scrobbler --update --artist="$SONG_ARTIST" \
				--album="$SONG_ALBUM" --track="$SONG_TITLE" \
				--duration="$SONG_DURATION" > /dev/null
		else
			lastfm-scrobbler --update --artist="$SONG_ARTIST" \
				--album="$SONG_ALBUM" --track="$SONG_TITLE" \
				--duration="$SONG_DURATION"
		fi
	fi
	if [ -n "$SCROBBLE_LIBREFM" ] ; then
		if [ $VERBOSE -eq 2 ] ; then
			echo librefm-scrobbler --update --artist="$SONG_ARTIST" --album="$SONG_ALBUM" --track="$SONG_TITLE"  --duration="$SONG_DURATION"
		fi
		if [ $VERBOSE -eq 0 -o $VERBOSE -eq 1 ] ; then
			librefm-scrobbler --update --artist="$SONG_ARTIST" \
				--album="$SONG_ALBUM" --track="$SONG_TITLE" \
				--duration="$SONG_DURATION" > /dev/null
		else
			librefm-scrobbler --update --artist="$SONG_ARTIST" \
				--album="$SONG_ALBUM" --track="$SONG_TITLE" \
				--duration="$SONG_DURATION"
		fi
	fi
}

update_song()
{
	uri="$1"
	state="$2"
	csum=`echo "$uri"|cksum|awk '{print $1}'`
	if [ " $state" = " now-playing" ] ; then
		if [ -n "$ELAPSED_TIME" ] ; then
			if [ $VERBOSE -gt 0 ] ; then
				echo "Play/Pause elapsed=$ELAPSED_TIME uri=[$uri]"
			fi
			return 0
		fi
		if [ -n "$PLAYER_STATE" ] ; then
			if [ "$PLAYER_STATE" = "pause" ] ; then
				if [ ! -f $MPDEV_TMPDIR/rating.$csum ] ; then
					if [ $sticker_enabled -eq 1 ] ; then
						rating=`get_mpd_rating "$uri"`
					elif  [ -n "$ROMPR" ] ; then
						tmp=`get_rompr_rating "$uri" | awk '{print $1}'`
						rating=`expr $tmp \* 2`
					elif [ $stats_enabled -eq 1 ] ; then
						rating=`get_stats_rating "$uri"`
					else
						echo "Nothing to do"
						exit 0
					fi
				fi
				for i in sticker rompr stats scrobble
				do
					if [ ! -f $MPDEV_TMPDIR/$i.$csum ] ; then
						if [ $VERBOSE -gt 0 ] ; then
							echo "creating $MPDEV_TMPDIR/$i.$csum"
						fi
						touch $MPDEV_TMPDIR/$i.$csum
					fi
				done
				return 0
			elif [ "$PLAYER_STATE" = "stop" ] ; then
				for i in sticker rompr stats scrobble start_time rating
				do
					if [ $VERBOSE -gt 0 ] ; then
						echo "removing $MPDEV_TMPDIR/$i.$csum"
					fi
					/bin/rm -f $MPDEV_TMPDIR/$i.$csum
				done
				return 0
			fi
		fi
	fi
	inserted=0
	# presence of rating.$csum indicates that
	# the script was run when a song started
	# we are being called again
	if [ -f $MPDEV_TMPDIR/rating.$csum ] ; then
		rating=`cat $MPDEV_TMPDIR/rating.$csum`
	else
		# you can have ratings maintained in sticker, rompr or both
		# prefer the sticker value as I use cantata more than rompr
		# at the moment because I started using cantata much
		# before rompr. You may alter the script if you want
		# but remember this script synchronizes both values
		if [ $sticker_enabled -eq 1 ] ; then
			rating=`get_mpd_rating "$uri"`
		elif  [ -n "$ROMPR" ] ; then
			tmp=`get_rompr_rating "$uri" | awk '{print $1}'`
			rating=`expr $tmp \* 2`
		elif [ $stats_enabled -eq 1 ] ; then
			rating=`get_stats_rating "$uri"`
		else
			echo "Nothing to do"
			exit 0
		fi
		if [ -z "$rating" ] ; then
			if [ -n "$AUTO_RATING" ] ; then
				rating=$AUTO_RATING # assign average rating of 3 for unrated music
			else
				rating=0
			fi
			inserted=1
			if [ $sticker_enabled -eq 1 ] ; then
				sticker_db_insert "$uri" "$rating"
				touch /tmp/sticker.$csum
			elif [ -n "$ROMPR" ] ; then
				rompr_rating_update "$uri" "$START_TIME" "$rating"
				touch /tmp/rompr.$csum
			elif [ $stats_enabled -eq 1 ] ; then
				stats_db_insert "$uri" "$rating"
				touch $MPDEV_TMPDIR/stats.$csum
			fi
		elif [ $rating -eq 0 ] ; then
			if [ -n "$AUTO_RATING" ] ; then
				rating=$AUTO_RATING;
				inserted=2
				if [ $sticker_enabled -eq 1 ] ; then
					sticker_db_update "$uri" "$rating"
					touch /tmp/sticker.$csum
				elif [ -n "$ROMPR" ] ; then
					rompr_rating_update "$uri" "$START_TIME" "$rating"
					touch /tmp/rompr.$csum
				elif  [ $stats_enabled -eq 1 ] ; then
					stats_db_update "$uri" "$rating" ""
					touch $MPDEV_TMPDIR/stats.$csum
				fi
			fi
		else
			inserted=0
		fi
	fi
	if [ $VERBOSE -gt 0 ] ; then
		if [ ! -f $MPDEV_TMPDIR/rating.$csum -a " $state" = " now-playing" ] ; then
			echo -n "NewSong Start=$START_TIME [`date +"%Y-%m-%d %H:%M:%S" --date=@"$START_TIME"`] "
			echo    "duration=$SONG_DURATION rating=[$rating]"
			echo "uri=[$uri]"
			if [ $inserted -eq 1 ] ; then
				if [ $sticker_enabled -eq 1 ] ; then
					echo "INSERT stker rating=$rating"
				elif [ -n "$ROMPR" ] ; then
					echo "INSERT RompR rating=$rating  Start=$START_TIME"
				elif  [ $stats_enabled -eq 1 ] ; then
					echo "INSERT stats rating=$rating"
				fi
			elif [ $inserted -eq 2 ] ; then
				if [ $sticker_enabled -eq 1 ] ; then
					echo "UPDATE stker rating=$rating"
				elif [ -n "$ROMPR" ] ; then
					echo "UPDATE RompR rating=$rating  Start=$START_TIME"
				elif  [ $stats_enabled -eq 1 ] ; then
					echo "UPDATE stats rating=$rating"
				fi
			fi
		fi
	fi
	if [ ! -f $MPDEV_TMPDIR/rating.$csum ] ; then
		echo $rating > $MPDEV_TMPDIR/rating.$csum
	fi
	case "$state" in
		"now-playing")
		if [ ! -f $MPDEV_TMPDIR/start_time.$csum ] ; then
			if [ -n "$START_TIME" ] ; then
				echo $START_TIME > $MPDEV_TMPDIR/start_time.$csum
			fi
		else
			START_TIME=`cat $MPDEV_TMPDIR/start_time.$csum`
		fi
		if [ $stats_enabled -eq 1 -a ! -f $MPDEV_TMPDIR/stats.$csum ] ; then
			if [ $VERBOSE -gt 0 ] ; then
				echo "INSERT stats rating=$rating  Start=$START_TIME"
			fi
			stats_db_insert "$uri" "$rating"
			touch $MPDEV_TMPDIR/stats.$csum
		fi
		if [ $sticker_enabled -eq 1 -a -n "$ROMPR" -a ! -f $MPDEV_TMPDIR/rompr.$csum ] ; then
			if [ $VERBOSE -gt 0 ] ; then
				tmp1=`expr "$rating" / 2`
				echo "UPDATE RompR rating=$tmp1  Start=$START_TIME"
			fi
			rompr_rating_update "$uri" "$START_TIME" "$rating"
			touch $MPDEV_TMPDIR/rompr.$csum
		fi
		if [ -n "$SCROBBLE_LIBREFM" -o -n "$SCROBBLE_LASTFM" ] ; then
			if [ ! -f $MPDEV_TMPDIR/scrobble.$csum ] ; then
				scrobble
				touch $MPDEV_TMPDIR/scrobble.$csum
			fi
		fi
		;;
		"end-song")
		if [ -z "$END_TIME" ] ; then
			exit 0
		fi
		if [ -f $MPDEV_TMPDIR/start_time.$csum ] ; then
			START_TIME=`cat $MPDEV_TMPDIR/start_time.$csum`
		fi
		/bin/rm -f $MPDEV_TMPDIR/stats.$csum $MPDEV_TMPDIR/scrobble.$csum \
			$MPDEV_TMPDIR/rompr.$csum /tmp/sticker.$csum $MPDEV_TMPDIR/start_time.$csum
		if [ -n "$ROMPR" ] ; then
			rompr_uri=$(echo "$uri" | sed s/"'"/"\\\'"/g)
			TTindex=`get_TTindex "$rompr_uri"`
		fi
		# sync rating between sticker and rompr
		if [ $sticker_enabled -eq 1 -a -n "$ROMPR" ] ; then
			rating=`get_mpd_rating "$uri"`
			if [ -f $MPDEV_TMPDIR/rating.$csum ] ; then
				old_rating=`cat $MPDEV_TMPDIR/rating.$csum`
				/bin/rm -f $MPDEV_TMPDIR/rating.$csum
			else
				old_rating=`get_stat_rating $uri`
			fi
			if [ -z "$old_rating" ] ; then
				old_rating=0
			fi
			if [ -n "$TTindex" ] ; then
				# we get the timpstamp for the rating entry from Ratingtable
				line=`get_rompr_rating $TTindex`
				if [ -n "$line" ] ; then
					set $line
					rompr_rating=$1
					tstamp=$2
				else
					rompr_rating=-1
					tstamp=-1
				fi
				if [ -n "$line" ] && [ $tstamp -gt $START_TIME ] && [ $rompr_rating -gt 0 ] ; then
					# rompr Rating table has a newer entry
					tmp=`expr $rompr_rating \* 2`
					if [ $tmp -ne $rating ] ; then
						if [ $VERBOSE -gt 0 ] ; then
							echo "UPDATE stker from RompR new=$tmp old=$rating, TTindex=$TTindex, Times=old[$START_TIME], new[$tstamp]"
						fi
						rating=$tmp
						# update sticker with rating from rompr
						sticker_db_update "$uri" $rating
					fi
				elif [ $old_rating -gt 0 ] && [ $old_rating -ne $rating ] ; then # sticker table has a newer entry
					# sticker table has a newer entry
					if [ $VERBOSE -gt 0 ] ; then
						tmp1=`expr "$rating" / 2`
						tmp2=`expr "$old_rating" / 2`
						echo "UPDATE RompR from stker new=$tmp1 old=$tmp2, TTindex=$TTindex, Times=old[$START_TIME], new[$START_TIME]"
					fi
					# update rompr with rating from sticker
					rompr_rating_update "$uri" "$START_TIME" "$rating" "$TTindex"
				fi
			fi
		fi
		if [ $stats_enabled -eq 1 ] ; then
			if [ $VERBOSE -gt 0 ] ; then
				echo "UPDATE stats Playcount Start=$START_TIME End=$END_TIME rating=[$rating]"
			fi
			stats_db_update "$uri" "$rating" "$START_TIME"
		fi
		if [ -n "$ROMPR" ] ; then
			if [ -n "$TTindex" ] ; then
				if [ $VERBOSE -gt 0 ] ; then
					line=`get_rompr_playcount_ts "$TTindex"`
					if [ -z "$line" ] ; then
						pcount="0" #hopefully update will be successfull
						ts=$START_TIME
					else
						set $line
						pcount=$1
						ts=$2
					fi
					echo -n "UPDATE RompR Playcount TTindex=$TTindex, Playcount=`expr $pcount + 1` "
					if [ -n "$ts" ] && [ $ts -gt $START_TIME ] && [ $ts -lt $END_TIME ] ; then
						echo "[`date +"%Y-%m-%d %H:%M:%S" --date=@"$ts"`] updated by RompR"
					else
						echo "[`date +"%Y-%m-%d %H:%M:%S" --date=@"$END_TIME"`] updated by mpdev"
					fi
				fi
				rompr_update_playcount "$rompr_uri" "$START_TIME" "$TTindex"
			fi
		fi
		/bin/rm -f $MPDEV_TMPDIR/rating.$csum
		;;
	esac
	if [ $VERBOSE -gt 0 ] ; then
		case "$state" in
			"end-song")
			if [ -n "$END_TIME" ] ; then
				echo -n "EndSong stat Start=$START_TIME [`date +"%Y-%m-%d %H:%M:%S" --date=@"$START_TIME"`] "
				echo    "End=$END_TIME [`date +"%Y-%m-%d %H:%M:%S" --date=@"$END_TIME"`]"
				echo
			fi
			;;
		esac
	fi
}

if [ -z "$VERBOSE" ] ; then
	VERBOSE=0
fi
# we don't handle stream uri currently
echo $SONG_URI|grep "^http://" >/dev/null
if [ $? -eq 0 ] ; then
	exit 0
fi
music_dir=`get_mpd_conf_value music_directory`
if [ $? -ne 0 ] ; then
	echo "could not get music directory from mpd.conf" 1>&2
	exit 1
fi
sticker_file=`get_mpd_conf_value sticker_file`
if [ $? -ne 0 ] ; then
	sticker_enabled=0
else
	if [ -f $sticker_file ] ; then
		sticker_enabled=1
	else
		sticker_enabled=0
	fi
fi
stats_file=$music_dir/.mpd/stats.db
if [ -f $stats_file ] ; then
	stats_enabled=1
else
	stats_enabled=0
fi
do_rating=1
if [ -z "$MPDEV_TMPDIR" ] ; then
	MPDEV_TMPDIR=/tmp/mpdev
fi
mkdir -p $MPDEV_TMPDIR
if [ $VERBOSE -ne 0 ] ; then
	env > $MPDEV_TMPDIR/.env.log
fi
update_song "$SONG_URI" "$1"
exit 0
