#!/bin/sh
#
# $Log: player.in,v $
# Revision 1.6  2020-07-18 13:23:46+05:30  Cprogrammer
# refactored script
#
# Revision 1.5  2020-07-17 22:30:48+05:30  Cprogrammer
# refactored code
#
# Revision 1.4  2020-07-17 18:40:15+05:30  Cprogrammer
# update rating in sticker, stats if rating is set in rompr web player
#
# Revision 1.3  2020-07-16 12:41:08+05:30  Cprogrammer
# update rating to 6 if rating is zero
#
# Revision 1.2  2020-07-13 01:04:53+05:30  Cprogrammer
# add stat entry without need for mpdev_update
#
# Revision 1.1  2020-07-08 10:59:46+05:30  Cprogrammer
# Initial revision
#
#
# $Id: player.in,v 1.6 2020-07-18 13:23:46+05:30 Cprogrammer Exp mbhangui $
#
get_mpd_conf_value()
{
    grep "^$1" /etc/mpd.conf|awk '{print $2}' | \
    sed -e 's{"{{g'
}

get_TTindex()
{
    uri=`echo $1|sed -e "s{'{''{g"`
    echo "SELECT TTindex FROM Tracktable WHERE Uri='$uri';" \
		| mysql -s -u "$MYSQL_USER" -p"$MYSQL_PASS" -h $MYSQL_HOST "$MYSQL_DATABASE" 2>/dev/null
    if [ $? -ne 0 ] ; then
        echo "error: SELECT TTindex FROM Tracktable WHERE Uri='$uri';" 1>&2
        return 1
    fi
}

get_rompr_rating()
{
	echo "SELECT Rating,UNIX_TIMESTAMP(zztimestamp) from Ratingtable where TTindex=$1;" \
		| mysql -s -u "$MYSQL_USER" -p"$MYSQL_PASS" -h $MYSQL_HOST "$MYSQL_DATABASE" 2>/dev/null
    if [ $? -ne 0 ] ; then
		echo "error: SELECT Rating,UNIX_TIMESTAMP(zztimestamp) from Ratingtable where TTindex=$1;" 1>&2
        return 1
    fi
}

get_mpd_rating()
{
    uri=`echo $1|sed -e "s{'{''{g"`
	sqlite3 -batch $sticker_file "SELECT value from sticker where type='song' and uri='$uri';"
    if [ $? -ne 0 ] ; then
        echo "error: SELECT value from sticker where type='song' and uri=\"$uri\";" 1>&2
        return 1
    fi
}

get_stat_rating()
{
    uri=`echo $1|sed -e "s{'{''{g"`
	sqlite3 -batch $stats_file "SELECT rating from song where uri='$uri';"
    if [ $? -ne 0 ] ; then
        echo "error: SELECT rating from song where uri='$uri';" 1>&2
        return 1
    fi
}

sticker_db_insert()
{
    uri=`echo $1|sed -e "s{'{''{g"`
	rating=$2
	sqlite3 -batch $sticker_file "INSERT or IGNORE into sticker values('song', '$uri', 'rating', $rating);"
    if [ $? -ne 0 ] ; then
		echo "error: INSERT into sticker values('song', '$uri', 'rating',$rating);" 1>&2
        return 1
    fi
}

sticker_db_update()
{
    uri=`echo $1|sed -e "s{'{''{g"`
	rating=$2
	sqlite3 -batch $sticker_file "UPDATE sticker set value=$rating where type='song' and uri='$uri';"
    if [ $? -ne 0 ] ; then
        echo "error: UPDATE sticker set value=$rating where type='song' and uri='$uri';" 1>&2
        return 1
    fi
}

stats_db_insert()
{
	# SONG_LAST_MODIFIED: last_modified
	# SONG_ALBUM: album
	# SONG_ARTIST: artist
	# SONG_DATE: date
	# SONG_GENRE: genre
	# SONG_TITLE: title
	# SONG_TRACK: track
	# SONG_DURATION: duration

    uri=`echo "$1" | sed -e "s{'{''{g"`
	ARTIST=`echo "$SONG_ARTIST" | sed -e "s{'{''{g"`
	ALBUM=`echo "$SONG_ALBUM" | sed -e "s{'{''{g"`
	TITLE=`echo "$SONG_TITLE" | sed -e "s{'{''{g"`
	rating=$2
	sqlite3 -batch $stats_file "INSERT or IGNORE into \
		song (uri, play_count, last_played, rating, duration,last_modified,artist,album,title,track,genre,date) \
		values ('$uri',0,0,$rating,$SONG_DURATION,$SONG_LAST_MODIFIED,'$ARTIST','$ALBUM','$TITLE','$SONG_TRACK','$SONG_GENRE','$SONG_DATE');"
    if [ $? -ne 0 ] ; then
		(
		echo -n "INSERT or IGNORE into song "
		echo -n "(uri, play_count, last_played, rating, duration,"
		echo -n "last_modified,artist,album,title,track,genre,date)"
		echo -n "values ('$uri',0,0,$rating,$SONG_DURATION,"
		echo -n "$SONG_LAST_MODIFIED,'$ARTIST','$ALBUM','$TITLE',"
		echo -n "'$SONG_TRACK','$SONG_GENRE','$SONG_DATE');"
		echo
		) 1>&2
        return 1
	fi
}

stats_db_update()
{
	last_played=$1
    uri=`echo "$2" | sed -e "s{'{''{g"`
	rating=$3
	sqlite3 -batch $stats_file \
		"UPDATE song set last_played=$last_played,play_count=play_count+1,rating=$rating where uri='$uri';"
    if [ $? -ne 0 ] ; then
		echo  "ERROR: UPDATE song set last_played=$last_played,play_count=play_count+1,rating=$rating where uri='$uri';" 1>&2
        return 1
    fi
}

rompr_db_update()
{
	uri="$1"
	tstamp="$2"
    rompr_rating=`expr "$3" / 2`
    TTindex=`get_TTindex "$uri"`
    if [ -n "$TTindex" ] ; then
        (
        echo -n "INSERT into Playcounttable (TTindex, Playcount, LastPlayed) "
        echo -n "VALUES ($TTindex,1, NOW()) ON DUPLICATE "
        echo -n "KEY UPDATE Playcount=Playcount+1, LastPlayed=NOW();"
        echo
		echo -n "INSERT INTO Ratingtable (TTindex, Rating, zztimestamp) "
		echo -n "VALUES ($TTindex, $rompr_rating, FROM_UNIXTIME($tstamp)) "
		echo -n "ON DUPLICATE KEY UPDATE Rating = $rompr_rating, "
		echo -n "zztimestamp=FROM_UNIXTIME($tstamp);"
        echo
        ) | mysql -s -u "$MYSQL_USER" -p"$MYSQL_PASS" -h $MYSQL_HOST "$MYSQL_DATABASE" 2>/dev/null
        if [ $? -ne 0 ] ; then
            (
            echo -n "INSERT into Playcounttable (TTindex, Playcount, LastPlayed) "
            echo -n "VALUES ($TTindex,1, NOW()) ON DUPLICATE "
            echo -n "KEY UPDATE Playcount=Playcount+1, LastPlayed=NOW();"
            echo
            echo -n "INSERT INTO Ratingtable (TTindex, Rating, zztimestamp) "
			echo -n "VALUES ($TTindex, $rompr_rating, FROM_UNXTIME($tstamp)) "
			echo -n "ON DUPLICATE KEY UPDATE Rating = $rompr_rating, "
			echo -n "zztimestamp=FROM_UNXTIME($tstamp);"
            echo
            ) 1>&2
            return 1
        fi
    fi
}

scrobble()
{
	if [ -n "$SCROBBLE_LASTFM" ] ; then
		if [ $VERBOSE -eq 2 ] ; then
			echo lastfm-scrobbler --update --artist="$SONG_ARTIST" --album="$SONG_ALBUM" --track="$SONG_TITLE"  --duration="$SONG_DURATION"
		fi
		if [ $VERBOSE -eq 0 -o $VERBOSE -eq 1 ] ; then
			lastfm-scrobbler --update --artist="$SONG_ARTIST" \
				--album="$SONG_ALBUM" --track="$SONG_TITLE" \
				--duration="$SONG_DURATION" > /dev/null
		else
			lastfm-scrobbler --update --artist="$SONG_ARTIST" \
				--album="$SONG_ALBUM" --track="$SONG_TITLE" \
				--duration="$SONG_DURATION"
		fi
	fi
	if [ -n "$SCROBBLE_LIBREFM" ] ; then
		if [ $VERBOSE -eq 2 ] ; then
			echo librefm-scrobbler --update --artist="$SONG_ARTIST" --album="$SONG_ALBUM" --track="$SONG_TITLE"  --duration="$SONG_DURATION" > /dev/null
		fi
		if [ $VERBOSE -eq 0 -o $VERBOSE -eq 1 ] ; then
			librefm-scrobbler --update --artist="$SONG_ARTIST" \
				--album="$SONG_ALBUM" --track="$SONG_TITLE" \
				--duration="$SONG_DURATION" > /dev/null
		else
			librefm-scrobbler --update --artist="$SONG_ARTIST" \
				--album="$SONG_ALBUM" --track="$SONG_TITLE" \
				--duration="$SONG_DURATION"
		fi
	fi
}

update_song()
{
	uri=$1
	rating=`get_mpd_rating "$uri"`
	if [ -z "$rating" ] ; then
		rating=6 # assign average rating of 3 for unrated music
		if [ $VERBOSE -gt 0 ] ; then
			echo "INSERT sticker rating=$rating song=[$uri]"
		fi
		sticker_db_insert "$uri" "$rating"
	elif [ $rating -eq 0 ] ; then
		rating=6;
		if [ $VERBOSE -gt 0 ] ; then
			echo "UPDATE sticker rating=$rating song=[$uri]"
		fi
		sticker_db_update "$uri" "$rating"
	fi
	if [ $VERBOSE -gt 0 ] ; then
		case "$2" in
			"now-playing")
			end_time=`expr $START_TIME + $SONG_DURATION 2>/dev/null`
			echo "NewSong stat   Start=$START_TIME END_TIME=$end_time rating=$rating song=[$uri]"
			;;
			"end-song")
			echo "EndSong stat   Start=$START_TIME END_TIME=$END_TIME rating=$rating song=[$uri]"
			;;
		esac
	fi
	case "$2" in
		"now-playing")
		stats_db_insert "$uri" "$rating"
		if [ -n "$ROMPR" ] ; then
			rompr_db_update "$uri" "$START_TIME" "$rating"
		fi
		;;
		"end-song")
		if [ -n "$ROMPR" ] ; then
			old_rating=`get_stat_rating $uri`
			if [ -z "$old_rating" ] ; then
				old_rating=0
			fi
    		TTindex=`get_TTindex "$uri"`
			if [ -n "$TTindex" ] ; then
				line=`get_rompr_rating $TTindex`
				set $line
				rompr_rating=$1
				tstamp=$2
				if [ -n "$tstamp" -a -n "$rompr_rating" -a $tstamp -gt $START_TIME -a $rompr_rating -gt 0 ] ; then # rompr Rating table has a newer entry
					tmp=`expr $rompr_rating \* 2`
					if [ $tmp -ne $rating ] ; then
						if [ $VERBOSE -gt 0 ] ; then
							echo "UPDATE sticker from ROMPR new=$tmp old=$rating, TTindex=$TTindex, Times=old[$START_TIME], new[$tstamp]"
						fi
						rating=$tmp
						# update sticker with rating from rompr
						sticker_db_update "$uri" $rating
					fi
				elif [ $old_rating -gt 0 -a $old_rating -ne $rating ] ; then # sticker table has a newer entry
					if [ $VERBOSE -gt 0 ] ; then
						echo "UPDATE ROMPR from sticker new=$rating old=$old_rating, TTindex=$TTindex, Times=old[$START_TIME], new[$START_TIME]"
					fi
					# update rompr with rating from sticker
					rompr_db_update "$uri" "$START_TIME" "$rating"
				fi
			fi
		fi
		stats_db_update $START_TIME "$uri" "$rating"
		;;
	esac
}

if [ -z "$VERBOSE" ] ; then
	VERBOSE=0
fi
music_dir=`get_mpd_conf_value music_directory`
if [ $? -ne 0 ] ; then
   	echo "could not get music directory from mpd.conf" 1>&2
   	exit 1
fi
sticker_file=`get_mpd_conf_value sticker_file`
if [ $? -ne 0 ] ; then
   	echo "could not get sticker database from mpd.conf" 1>&2
  	exit 1
fi
stats_file=$music_dir/.mpd/stats.db
update_song "$SONG_URI" "$1"
if [ -n "$SCROBBLE_LIBREFM" -o -n "$SCROBBLE_LASTFM" ] ; then
	scrobble
fi
exit 0
